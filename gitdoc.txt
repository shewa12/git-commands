1)initialize git 
*git init (it will create a empty .git repo. it is basically main git repo)

2)remove local git repo
*rm -rf .git

3)add specific file
*git add <file name>

4)add all file from current folder. (.) dot means current folder
git add . (now files belongs to staging area)

5)commit changes. 
*git commit (this command will open integreted text editor with git & it will allow to write multiline messages)

git commit -m "commit message" (commit changes with single line message)

6)check git commit detail with author date & time
*git log

7)to check what new things added use below command
*git show

7)check which files git has been tracking
*git ls-files

8)remove specific file from working directory
*rm filename.ext (git bash command)

9)remove unwanted changes from a file
*git checkout --filename.ext

10)check available help options git 
* git help log

11) git commands with help options 
*git log --oneline --graph --decorate --all 
(--online will provide lots of information in oneline instead of multiline. --graph which will provide asteric based graph denoting our branching hierarchy. --decorate will tell us which commits are part of which branches. --all will provide the history for all the branches that are available in the repo)

12) git aliasing. its basically make shorten of some existing git commands. will use above command as history by aliasing
*git config --global alias.hist "log --oneline --graph --decorate --all" (log --oneline --graph --decorate --all shorten of this commands will be hist)

13)check available config list
*git config --glbal --list

14) git alias commands
*git aliasname (ex: git hist)

15) check history for a specific file
git hist -- filename (here hist is an alias and specify file name to check that particular file history)

16) rename file name in git
*git mv filename.ext newname.ext

17) remove file completely from repo
*git rm file.name (its deleted but need to commit for changes done)

18) if delete file from out side of git then git will sees the file has been deleted and new named file is untracked. to delete deleted file use below command
*git add -u (it will delete the file) 

19) if want to addition of file and delete of file then we can use below command. Git will properly add new named file and delete the right file in git index.
*git add -A

20) ignore file to be tracked create a .gitignore  file and specify file name or *.ext. per line for per specification

21) to check differences between working directory and HEAD (last commit) 
*git diff (git difftool will open p4merge tool its really easy to understand)

22) to check differences between two commits 
*git diff commitId commit

23) remove commit from branch by id
*git revert --strategy resolve commitID (this command will remove commit from branch)

****git head points to last commit of current branch****

24) move changes to a newly created branch & switch on that branch as well. couple of things will happen with below command
*git checkout -b branchName (-b for branch, so this command will create & switch to new branch, if there is unstaged file then it will be move there)

25) switch between branches 
*git checkout branchName

26) merge branch with master. switch to master branch first then hit below command
*git merge branchName (it will so fast forward merging)

27) check differences between branch
*git diff branchA branchB

28) check available branches
*git branch

29) delete a branch 
*git branch -d branchName (it will remove branch completely)